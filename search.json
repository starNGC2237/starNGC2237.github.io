[{"title":"21天规划","url":"//post/21%E5%A4%A9%E8%A7%84%E5%88%92.html","content":"2/7/21 Vue.js3/7/21 MVVM3/7/21 REST风格4/7/21 CSS(CSS3)4/7/21 HTML54/7/21 bootstrap.css8/14/21 Element UI8/14/21 axios9/14/21 javascript14/14/21 es6规范14/14/21 TypeScript15/21/21 TypeScript15/21/21 Sass17/21/21 NuxtJs17/21/21 opal","tags":["规划"]},{"title":"blog-nginx","url":"//post/blog-nginx.html","content":"配置nginx代理hexo将_config.yml中的public_dir配置为nginx代理的文件夹这样就会使hexo g命令生成文件在其中\n"},{"title":"Hello World","url":"//post/hello-world.html","content":"* 该文章为Hexo自动生成\n欢迎来到 Hexo! 这是您的第一篇文章。 查看 文档 以获取更多信息。如果在使用Hexo时遇到任何问题，可以在 故障排除 找到答案，也可以在 GitHub上问我。\n快速开始Create a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["hexo"]},{"title":"js撞坑实录（不是）","url":"//post/js%E6%92%9E%E5%9D%91%E5%AE%9E%E5%BD%95%EF%BC%88%E4%B8%8D%E6%98%AF%EF%BC%89.html","content":"浮点数计算问题关于浮点数加减乘除不对const a =0.1+0.2a = 0.30000000000000004 !=0.3\n\n是底层的计算问题\n解决方法：\n\n使用库 Math.js官网\n\nGitHub\n\n使用toFixed()方法该方法使用定点表示法来格式化一个数，会对结果进行四舍五入。numObj.toFixed(digits)\n\n参数digits表示小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。如果忽略该参数，则默认为 0。\n\n但是！ 此方法返回值为String\n例如：\nconst a =0.1+0.2a.toFixed(10) == 0.3\n\n拷贝问题拷贝对象// 为什么要克隆（因为js中相等是将对象地址相等// 克隆对象的方法：// loash的方法(一般使用) _.cloneDeep(value)（深拷贝）（和递归一样）// 递归查找至基础数据类型// 转为string再转回来 （undefined、function、symbol 会在转换过程中被忽略）// es6语法 const a=&#123;...b&#125; 如果其中有对象（例如b:&#123;a:1&#125;），对象b转换后依然是原地址（即a与b的b指向同一个）","tags":["javascript"]},{"title":"opal","url":"//post/opal.html","content":"todo something\n","tags":["vue2 elementui"]},{"title":"nodejs建立tcp服务器及客户端并避免粘包","url":"//post/nodejs%E5%BB%BA%E7%AB%8Btcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B9%B6%E9%81%BF%E5%85%8D%E7%B2%98%E5%8C%85.html","content":"","tags":["nodejs tcp"]},{"title":"promise-1 promise的使用","url":"//post/promise-1.html","content":"","tags":["es6 promise"]},{"title":"promise-2 实现一个promise","url":"//post/promise-2.html","content":"","tags":["es6"]},{"title":"promise-3 async & await","url":"//post/promise-3.html","content":"","tags":["es6 promise"]},{"title":"quick_start_html_note","url":"//post/quick-start-html-note.html","content":"lorem占位字符\n块级元素与内联元素inline element\n即内联元素\n\n通常在块级元素内\n\n\n不会导致文本换行\n\n\n只占用必要的部分宽度\n\nblock element\n即块级元素\n\n在页面以块的形式展现\n\n\n出现在新的一行\n\n\n占全部宽度\n\nblockquote\n即长的引用，块元素\nabbr即缩略语\ncite即引用\n"},{"title":"sass入门-1","url":"//post/sass%E5%85%A5%E9%97%A8-1.html","content":"sass入门学习自https://juejin.cn/post/6971458017267187719\n\nsass是最早的css预处理语言，有比less更为强大的功能。但因其一开始的缩进式语法并不能被开发者们接受，所以使用率不高，不过由于其强大的功能和Ruby on Rails 的大力推动，逐渐被更多开发者使用。\n\n\nsass是采用的Ruby语言编写的一款css预处理语言，它诞生于2007年，是最早成熟css预处理语言。最初它是为了配合haml而设计的，因此有着和haml一样的缩进式风格。\n\n\nsass从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的css代码，这一代的sass也被称为scss。\n\nsass是css的预编译语言，css扩展语言安装sassyarn add sass-loader sass\n\n编译sass为csssass input.scss ouput.css\n\n表示将input.sass编译为output.css\n监视sass变化并编译sass --watch input.scss:ouput.css\n\n表示监视变化，当input.scss一变化，output.css就变化\n监视文件夹sass --watch yuan:bian\n\n表示：当名字为yuan这个文件夹里任意一个.scss后缀的文件变化时，就将其编译到名字bian这个文件夹里面（会自动生成相应的.css文件）\n基础用法变量定义一个变量：\n$yanse:rgb(122,122,122)\n\n使用：\ni&#123;  color:$yanse;  &#125;\n\n套娃：\n$yanse:rgb(122,122,122)$kuang:1px solid $yanse;\n\n嵌套例如：\ndiv&#123;    height:100px;    ul&#123;        height:80px;        li&#123;            height:50px;        &#125;    &#125;&#125;\n\n伪类选择器：&amp;:\ndiv&#123;     height: 100px;     ul&#123;         height: 80px;         li&#123;             height: 50px;             &amp;:hover &#123;                color: #000;             &#125;         &#125;     &#125; &#125;\n\n属性嵌套：\ndiv&#123;    border: 1px solid red &#123;        left: 0;         top: 0;     &#125;&#125;\n\n相当于：\ndiv &#123;    border: 1px solid red;    border-left: 0;    border-top: 0; &#125;\n\nmixin 混入（相当于预先写好了一组样式，其它地方直接引用）基本语法@mixin 名字（参数1，参数2，...） &#123;    ........样式....... &#125;\n\n例：\n@mixin hunhe &#123;     color: red;     a &#123;         font-size: 12px;     &#125; &#125; div&#123;    @include hunhe; &#125;\n\n相当于：\ndiv &#123; color: red; &#125; div a &#123; font-size: 12px; &#125;\n\n带参数@mixin hunhe($one,$two) &#123;     color: $one;     a &#123;         color: $one; font-size: $two;     &#125; &#125; div&#123;     @include hunhe(red,15px); &#125;\n\n或：(指定参数名，可以变换参数位置)\ndiv&#123; @include hunhe($two:15px,$one:red); &#125;\n\n继承/扩展（一个选择器可以继承另一个选择器的全部样式）例如：\n.one&#123;    color: #000;&#125; .one a&#123;     font-size: 10px; &#125; .two&#123;     @extend .one;     background-color: #fff; &#125;\n\n.two会继承.one的所有样式，包括子代相当于：\n.one, .two &#123;     color: #000; &#125; .one a, .two a &#123;     font-size: 10px; &#125; .two &#123;    background-color: #fff;&#125;\n\n@import 引入文件Sass 中 @import 指令则可以位于文件中的任意位置。\n引入scss文件使用@import &quot;colors&quot;;引入colors.scss文件\n使用SCSS部分文件当通过@import把scss样式分散到多个文件时，你通常只想生成少数几个css文件。那些专门为@import命令而编写的scss文件，并不需要生成对应的独立css文件，这样的scss文件称为局部文件。对此，sass有一个特殊的约定来命名这些文件。\n即在文件名前加 _注意，此引入的不会生成该文件的css文件例：\n@import &quot;themes/night-sky&quot;;\n\n默认变量值一般情况下，后面的变量值会覆盖前面的变量值我们可以通过加!default例如：有blue.scss文件\n$link-color: blue !default;\n\n我们在文件中导入\n$link-color: red;@import &#x27;blue&#x27;\n\n此时颜色为红色\n","tags":["sass"]},{"title":"任务书","url":"//post/shops.html","content":"概述项目背景及建设目标当今社会，商店扮演着重要的社会职能，但是随着互联网的迅速发展，传统的线下购物方式已经无法满足人们快节奏的生活需求。在线购物系统已成为提升商店效率的重要技术手段，而现有的在线购物系统存在着所购物品运输时间长、补货慢、无法与线下商店进行交互等缺点。因此开发一个在线自助购物平台是很有必要的，这样可以大大所购物品的处理效率，在一定程度上降低了人力物力的成本。该在线自助购物平台可以在实现顾客在网上或线下购物自助化，进行多仓发货、商店无货本地仓库发货及顾客商店自助取货，节约了本来需耗费的时间，也间接地提升了每日的营业额。在毕业设计期间，本人选择“基于Vue.js的在线自助购物平台的设计与实现”课题开展相关问题研究，主要基于本科在学期间，系统学习了相关知识与技术，并对于在线购物平台有所研究，具备开发这一课题的技术与能力储备。\n建设内容待定\n\n前端方面：使用nginx代理vue项目，使用\n\n&gt; Vue2(可能会升级为Vue3)\n&gt; vue-cli(Vue.js开发的标准工具,即Vue.js的脚手架)\n&gt; vueRouter(Vue.js官方的路由管理器)\n&gt; vuex(Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。)(不用，我的项目太简单了)\n&gt; Axios(基于promise的HTTP库)\n&gt; elementUI(UI框架)\n&gt; Electron(使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序)(也许会用)\n\n来编写前端工程\n\n\n后端方面：使用tomcat部署后端项目，并接受nginx代理\n&gt; Spring boot\n&gt; express(可以学习，但是应该不用)\n\n系统功能设计角色一、选题意义当今社会，商店扮演着重要的社会职能，但是随着互联网的迅速发展，传统的线下购物方式已经无法满足人们快节奏的生活需求。在线购物系统已成为提升商店效率的重要技术手段，而现有的在线购物系统存在着所购物品运输时间长、补货慢、无法与线下商店进行交互等缺点。因此开发一个在线自助购物平台是很有必要的，这样可以大大所购物品的处理效率，在一定程度上降低了人力物力的成本。该在线自助购物平台可以在实现顾客在网上或线下购物自助化，进行多仓发货、商店无货本地仓库发货及顾客商店自助取货，节约了本来需耗费的时间，也间接地提升了每日的营业额。\n二、论文综述欧美地区电子商务起步早、应用广。1995年，亚马逊和易贝在美国成立。此后，这种以互联网为依托进行商品和服务交易的新兴经济活动，迅速普及全球。新一轮科技革命和产业变革交汇孕育的电子商务，极大提高了经济运行的质量和效率，改变了人类的生产生活方式。2016年，全球电子商务市场规模超过25万亿美元，成为世界经济的亮点和新增长点。亚洲地区电子商务体量大、发展快。电子商务起源于欧美，但兴盛于亚洲。中国网络零售交易额自2013年起已稳居世界第一。巨大的网民红利将继续支持亚洲市场发展。在线购物系统可以提供更优质多服务，可以为用户提供更加全面的商品信息。降低成本的同时可以容纳几乎处于服务区域任何地方的客户。因此在线购物系统已成为提升商店效率的重要技术手段，而现有的在线购物系统存在着所购物品运输时间长、补货慢、无法与线下商店进行交互等缺点。\n因此开发一个在线自助购物平台是很有必要的，这样可以大大所购物品的处理效率，在一定程度上降低了人力物力的成本。该在线自助购物平台可以在实现顾客在网上或线下购物自助化，进行多仓发货、商店无货本地仓库发货及顾客商店自助取货，节约了本来需耗费的时间，也间接地提升了每日的营业额。\n三、课题研究内容(1) 在线自助购物平台\n(2) 实现顾客在网上或线下购物自助化\n(3) 进行多仓发货\n(4) 商店无货本地仓库发货\n(5) 顾客网上购买后商店自助取货\n四、课题研究方法及研究手段在论证项目可行性，制定项目初步计划，查阅文献资料点基础上，建立系统总体结构，划分功能模块，定义各功能模块接口及设计数据库。与此同时设计各模块具体实现算法，确定模块间详细接口及编写程序源代码，进行模块测试和调试并测试完善系统。\n\n系统的体系结构\n\n相对于传统的C／S结构，在线自助购物平台采用基于B／S的三层体系结构，即Web浏览器、Web服务器及数据库系统。\n\n系统总体功能模块\n\n购物平台系统分为前台管理和后台管理。前台管理包括浏览商品、查询商品、订购商品、购物车、用户信息维护等功能。后台管理包括商品管理、定单管理和用户管理等模块。\n(1)前端方面：使用nginx代理前端Vue项目，并使用Vue.js框架、vue-cli与vueRouter来来编写前端工程\n(2)后端方面：使用tomcat部署后端项目，并接受nginx代理，并使用Spring boot来编写后端api接口。\n(3)环境：腾讯云轻量级应用服务器、Ubuntu 20.04、nginx/1.18.0 (Ubuntu)、nvm 0.39.0、node.js v14.17.0、npm 6.14.13、openjdk openjdk-17-jdk、tomcat apache-tomcat-9.0.54\n五、课题研究步骤2021年12月03日至2021年12月12日  论证项目可行性，制定项目初步计划，查阅文献资料\n2021年12月13日至2022年1月02日  确定系统运行环境，系统功能及性能要求，确认项目开发计划\n2022年1月03日至2022年1月30日   建立系统总体结构，划分功能模块，定义各功能模块接口，数据库设计\n2022年1月31日至2022年2月27日   设计各模块具体实现算法，确定模块间详细接口\n2022年2月28日至2022年3月27日   编写程序源代码，进行模块测试和调试\n2022年3月28日至2022年4月17日   系统测试并完善，纠正错误，完善应用\n2022年4月18日至2022年5月29日   撰写、修改并打印毕业设计说明书，准备答辩\n2022年5月30日至2022年6月03日   毕业设计答辩\n六、参考文献资料[1]方生,秦晓安,王睿.基于前后端分离技术的在线购物平台研究与实现[J].黄河水利职业技术学院学报,2021,33(04):50-54.\n[2]胡开华,张玉静,陈明禄等.基于Vue.js的Web应用开发教学案例设计与实现[J].信息与电脑(理论版),2021,33(18):91-94.\n[3]刘紫薇. 基于MVVM设计模式的在线教育系统的设计与实现[D].北京邮电大学,2021.\n[4]焦灵.基于Web的购物网站系统设计[J].电脑编程技巧与维护,2018(12):131-133+139.\n[5]罗业丁,杨振南,贺英健.基于WEB前端技术的校园购物网站的设计与实现[J].信息记录材料,2020,21(08):209-210.\n[6]陈秋玲.基于JavaWeb的图书购物网站的设计与实现[J].电脑知识与技术,2019,15(16):36-38.\n[7]王伟,常庆丽,吴朝霞.基于Springboot+Vue的精准帮扶系统研究与实现[J].河南科技,2021,40(27):12-14.\n[8]焦鹏珲.基于SpringBoot和Vue框架的电子招投标系统的设计与实现[D].南京大学,2018.\n[9]邱璐璐,陈俊仁.基于SpringBoot和Vue框架的高校代领系统设计与实现[J].信息技术与信息化,2021(04):25-27.\n[10]方生.基于“Vue.js”前端框架技术的研究[J].电脑知识与技术,2021,17(19):59-60+64.\n[11]刘启伟. 基于Vue.js框架的Web前端开发工具的设计与实现[D].北京邮电大学,2021.\n[12]朱文忠,彭楠,曹丰等.基于vue.js的学术科技活动线上交流的设计与实现[J].长江信息通信,2021,34(04):128-131.\n[13]胡开华,张玉静,陈明禄等.基于Vue.js的Web应用开发教学案例设计与实现[J].信息与电脑(理论版),2021,33(18):91-94.\n[14]李俊甲,许烨.基于Java的购物网站设计与开发[J].信息与电脑(理论版),2020,32(23):86-88.\n","categories":["vue"],"tags":["vue"]},{"title":"vue中遇到的坑","url":"//post/vue%E5%9D%91.html","content":"vue中遇到的坑vscode 编写中的Already included file name ‘×××‘ differs from file name ‘×××‘ only in casing.vs code的bug\n快捷键：Ctrl + shift + P，打开：“命令面板”，输入：重新加载\n\n如果控制台报错\nyarn serve\n\nvue生命周期各个生命周期钩子是同步的意味着：\n\ncreated和mounted是同步的\n\n即：\n先执行created里的同步代码，再执行mounted里的同步代码，再执行created里的异步代码，再执行mounted里的异步代码\nvue组件与子组件生命周期beforeCreated\ncreated\nbeforeMount\n 子组件beforeCreated\n 子组件created\n 子组件beforeMount\n 子组件mounted\nmouted\n","categories":["vue"],"tags":["vue"]},{"title":"前端技术收集","url":"//post/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%94%B6%E9%9B%86.html","content":"三大件HTMLHTML5\nXHTML\nCSSCSS3\nbootstrap(框架)\njavascriptjavascript\nes6\n开发模式MVVM\nJS框架Vue.js\nVuex\nVueRouter\n打包工具Webpack\nVite\n风格RESTful\n后端nodejs\nJS超集TypeScript\ncss扩展语言sass\n网络请求库axios\nVue.js的框架nuxt.js\n"},{"title":"前端摘抄","url":"//post/%E5%89%8D%E7%AB%AF%E6%91%98%E6%8A%84.html","content":"前端的四件套那么，这样的产品怎么做呢？简单地说就是四件套：\n第一，PRD/FRD文档，详细描述了产品逻辑和功能需求，包括主要的使用链路也都在里面，让你明白你在做一个什么东西。\n第二，交互设计文档，包括页面示意图和分镜图，以及跳转链路和必要的标注，让你明白你做的东西大致长啥样以及怎么用。\n第三，Design Pattern Library，简称DPL，包含标准样式集（边距/字体/色值等），组件设计清单以及使用样例，标准layout，以及常见场景的交互案例（供设计师参考）。\n第四，标准物料库，即严格按照DPL实现的组件库，css样式库，以及常见场景的模板库。\n在这四件套的基础上，前端工程师的理想工作流程是：使用标准工具初始化项目☞创建必要的代码文件☞按照交互设计将物料堆到代码中☞编写业务逻辑（数据流）☞提交测试☞bugfix☞发布上线。\n作者：欲三更链接：https://www.zhihu.com/question/380055831/answer/1104842267来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","tags":["摘抄"]},{"url":"//post/%E5%BC%80%E5%AD%A6%E5%89%8D%E7%AD%94%E8%BE%A9.html","content":"（1）选题背景、立意和应用需求等        当今社会，商店扮演着重要的社会职能，但是随着互联网的迅速发展，传统的线下购物方式已经无法满足人们快节奏的生活需求。在线购物系统已成为提升商店效率的重要技术手段。该在线自助购物平台可以在实现顾客在网上或线下购物自助化，进行多仓发货、商店无货本地仓库发货及顾客商店自助取货，节约了本来需耗费的时间，也间接地提升了每日的营业额。在毕业设计期间，本人选择“基于Vue.js的在线自助购物平台的设计与实现”课题开展相关问题研究，主要基于本科在学期间，系统学习了相关知识与技术，并对于在线购物平台有所研究，具备开发这一课题的技术与能力储备。\n（2）课题前期调研情况现有的在线购物系统存在着所购物品运输时间长、补货慢、无法与线下商店进行交互等缺点。因此开发一个在线自助购物平台是很有必要的，这样可以大大所购物品的处理效率，在一定程度上降低了人力物力的成本\n（3）具体的课题任务要求等情况(1) 在线自助购物平台\n(2) 实现顾客在网上或线下购物自助化\n(3) 进行多仓发货\n(4) 商店无货本地仓库发货\n(5) 顾客网上购买后商店自助取货\n（4）实施方案（包括技术方案、设计方案等）、实施计划等技术方案：\n\n前端方面：使用Vue2、vue-cli（包括前端打包工具webpack、js转换工具babel、代码规范工具eslint、默认包管理器yarn）、vueRouter、vuex、Axios、elementUI、sass，使用normalize.css重置css样式\n\n\n后端方面：使用spring boot、mysql数据库\n\n\n运维方面：使用nginx代理前端项目，反向代理后端tomcat服务器，解决前端跨域问题\n\n\n测试方面：使用jest进行前端单元测试\n\n设计方案：\n以消息推送、公告推送功能为例：\n一、需求相关信息需求背景：需要实现推送功能放弃js轮询的原因（30秒轮询一次对服务器压力大，后端需要写更多的接口，维护麻烦）PRD：文档链接 联调时间：2022.03.10 提测时间：2022.03.11 上线时间：2022.03.15二、实现方式前端：实现连接websocket连接，定时发送心跳包后端：实现接收发送消息运维：实现websocket连接被nginx代理三、用例图文件链接四、其他略\n\n实施计划：\n2021年12月03日至2021年12月12日 论证项目可行性，制定项目初步计划，查阅文献资料2021年12月13日至2022年1月02日 确定系统运行环境，系统功能及性能要求，确认项目开发计划2022年1月03日至2022年1月30日 建立系统总体结构，划分功能模块，定义各功能模块接口，数据库设计2022年1月31日至2022年2月27日 设计各模块具体实现算法，确定模块间详细接口2022年2月28日至2022年3月27日 编写程序源代码，进行模块测试和调试2022年3月28日至2022年4月17日 系统测试并完善，纠正错误，完善应用2022年4月18日至2022年5月29日 撰写、修改并打印毕业设计说明书，准备答辩2022年5月30日至2022年6月03日 毕业设计答辩\n\n（5）目前已完成的进度，已完成部分内容的展示\n目前已完成除商城核心商品交易功能外的某些功能页面（用户信息模块，工单模块），剩余一些模块即将完成（搜索模块），初始化了后台项目\n\n（6）参考文献[1]方生,秦晓安,王睿.基于前后端分离技术的在线购物平台研究与实现[J].黄河水利职业技术学院学报,2021,33(04):50-54.\n[2]胡开华,张玉静,陈明禄等.基于Vue.js的Web应用开发教学案例设计与实现[J].信息与电脑(理论版),2021,33(18):91-94.\n[3]刘紫薇. 基于MVVM设计模式的在线教育系统的设计与实现[D].北京邮电大学,2021.\n[4]焦灵.基于Web的购物网站系统设计[J].电脑编程技巧与维护,2018(12):131-133+139.\n[5]罗业丁,杨振南,贺英健.基于WEB前端技术的校园购物网站的设计与实现[J].信息记录材料,2020,21(08):209-210.\n[6]陈秋玲.基于JavaWeb的图书购物网站的设计与实现[J].电脑知识与技术,2019,15(16):36-38.\n[7]王伟,常庆丽,吴朝霞.基于Springboot+Vue的精准帮扶系统研究与实现[J].河南科技,2021,40(27):12-14.\n[8]焦鹏珲.基于SpringBoot和Vue框架的电子招投标系统的设计与实现[D].南京大学,2018.\n[9]邱璐璐,陈俊仁.基于SpringBoot和Vue框架的高校代领系统设计与实现[J].信息技术与信息化,2021(04):25-27.\n[10]方生.基于“Vue.js”前端框架技术的研究[J].电脑知识与技术,2021,17(19):59-60+64.\n[11]刘启伟. 基于Vue.js框架的Web前端开发工具的设计与实现[D].北京邮电大学,2021.\n[12]朱文忠,彭楠,曹丰等.基于vue.js的学术科技活动线上交流的设计与实现[J].长江信息通信,2021,34(04):128-131.\n[13]胡开华,张玉静,陈明禄等.基于Vue.js的Web应用开发教学案例设计与实现[J].信息与电脑(理论版),2021,33(18):91-94.\n[14]李俊甲,许烨.基于Java的购物网站设计与开发[J].信息与电脑(理论版),2020,32(23):86-88.\n"},{"title":"1.1","url":"//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841-1.html","content":"概念数据是能输入计算机且能被计算机处理的各种符号的集合\n\n是信息的载体\n是对客观事物符号化的表示\n能够被计算机识别、储存和加工 包括\n数值型的数据\n非数值型的数据\n\n数据元素 是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理\n也简称为元素（ingredient？），或称为记录、结点或顶点\n一个数据元素可由若干个数据项组成\n数据项是构成数据元素的不可分割的最小单位 \n数据对象是性质相同的数据元素的集合，是数据的一个子集\n\n例：整数 数据对象是集合N={1，+1，-1，……}\n\n数据元素与数据对象数据元素————————组成数据的基本单位 \n（与数据的关系：是集合的个体） \n数据对象————————性质相同的数据元素的集合\n（与数据关系：是集合的子集）\n","categories":["数据结构"],"tags":["数据结构-概念"]},{"title":"服务器配置","url":"//post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE.html","content":"我所做的Ubuntu 20.04设置我的世界服务器minec.service\ncdrun.sh\n设置miraimcl.service\nmcl.sh\n设置tomcat略\n设置nginx/var/www/html\n/etc/nginx\n设置从gitee同步黑曜石，并自动发布 crontab -e\nsync2gitee\nopenjdk-17-jdk略，我的世界使用其\nnvm用来选择nodejs版本\nnodejs略\nyarn略\n","tags":["ubuntu"]},{"title":"玩客云刷入armbian并安装软件","url":"//post/%E7%8E%A9%E5%AE%A2%E4%BA%91.html","content":"安装资源一览https://www.aliyundrive.com/s/dBMzUQUajmc\n拆机\n使用热吹风机加热后盖，从如图usb接口缝隙处撬开后盖\n拧下6个螺丝，拉出板子\n\n刷入底层包\n使用双头usb线或typec转usb线（就是充电线）（如果你电脑有typec口的话）连接电脑，另一端插入远离网口的那一个usb口\n打开刷机软件，选择底层包，使用导线或镊子短接两个短接点（如图），此时电脑会有硬件连接成功的声音，软件显示连接成功。勾选抹除密匙，点击开始\n如果连接失败的话，在开机时按住重置键试试\n如果刷机失败的话，拔插线重新刷入，玩客云是刷不死的\n\n刷入armbian系统\n使用烧录工具格式化u盘，然后刷入img包\n将u盘插入靠近网口的那一个usb口，将usb-ttl如图插上板子，连接上串口，插上电源，开机\n用户名root密码1234,开机后需要修改密码，改完后如果要改名字直接ctrl+c，然后输用户名密码进入系统\n开机会自动获得ip地址，去路由器管理页面拿到ip，或者使用ifconfig命令得到ip\n使用ssh连接玩客云，\n执行cd /boot/install\n执行 bash install.sh\n等待写入emmc完成，完成后会熄灯并在终端提示\n拔下u盘、电源，重新上电，等待灯闪烁完成并亮蓝灯\n路由器获得iP，ssh进入\n\n安装ttyd\nhttps://github.com/tsl0922/ttyd\n\n\n依次执行：\nsudo apt-get install build-essential cmake git libjson-c-dev libwebsockets-dev\ngit clone https://github.com/tsl0922/ttyd.git\nchmod u+x ttyd\ncd ttyd &amp;&amp; mkdir build &amp;&amp; cd build\ncmake ..\nmake &amp;&amp; sudo make install\nsudo ./ttyd -p 7681 login\n安装完成后访问ip:7681即可使用ttyd\nttyd自启动：\n\n安装zsh及oh my zsh及自动补全安装filebrowser文件浏览器安装ServerStatus服务器监控\nhttps://github.com/cppla/ServerStatus\n\n灯光控制\n完成"},{"title":"登录及权限模块","url":"//post/%E7%99%BB%E5%BD%95%E5%8F%8A%E6%9D%83%E9%99%90%E6%A8%A1%E5%9D%97.html","content":"\n要注意的是，所有接口都会带一个header，值是token（如果有的话）\n\n登录成功后，服务端会返回一个 token（该token的是一个能唯一标示用户身份的一个key），之后我们将token存储在本地cookie之中，这样下次打开页面或者刷新页面的时候能记住用户的登录状态，不用再去登录页面重新登录了。\n\n所有token的有效期都是当浏览器关闭了就丢失了\n\n先说一说我权限控制的主体思路，前端会有一份路由表，它表示了每一个路由可访问的权限。当用户登录之后，通过 token 获取用户的 role （用户的一个字段），动态根据用户的 role 算出其对应有权限的路由，再通过router.addRoutes动态挂载路由。但这些控制都只是页面级的，说白了前端再怎么做权限控制都不是绝对安全的，后端的权限验证是逃不掉的。\n前端来控制页面级的权限，不同权限的用户显示不同的侧边栏和限制其所能进入的页面(也做了少许按钮级别的权限控制)，后端则会验证每一个涉及请求的操作，验证其是否有该操作的权限，\n\n每一个后台的请求不管是 get 还是 post 都会让前端在请求 header里面携带用户的 token，后端会根据该 token 来验证用户是否有权限执行该操作。若没有权限则抛出一个对应的状态码，前端检测到该状态码，做出相对应的操作。\n\n虽然后端的确也是有权限验证的，但它的验证其实是针对业务来划分的，比如超级编辑可以发布文章，而实习编辑只能编辑文章不能发布，但对于前端来说不管是超级编辑还是实习编辑都是有权限进入文章编辑页面的。所以前端和后端权限的划分是不太一致。\n","tags":["login permission"]}]